{"version":3,"sources":["serviceWorker.js","components/CommonChart/CommonChart.jsx","components/Title/Title.jsx","components/Loader/Loader.jsx","components/Dashboard/Dashboard.jsx","index.js"],"names":["Boolean","window","location","hostname","match","CommonChart","props","data","undefined","CustomTooltip","active","payload","label","className","style","background","padding","borderRadius","border","textAlign","fontWeight","color","map","item","index","key","name","value","Chart","chart","Line","Bar","selectChart","Type","LineChart","BarChart","ChartName","height","length","width","strokeDasharray","hide","dataKey","axis","content","layout","legendLayout","margin","top","left","right","bottom","verticalAlign","labels","stackId","type","stroke","colors","fill","activeDot","r","dot","Title","marginBottom","fontSize","title","marginTop","position","Loader","minHeight","role","Dashboard","useState","setData","loader","setLoader","useEffect","fetch","then","res","json","result","_error","array","groupbyDate","Object","keys","orders","reduce","currentValue","date","Date","getDate","getMonth","getFullYear","push","chartData","order","price","Orders","Price","columns","column","charAt","toUpperCase","slice","selector","sortable","grid","customers","pagination","highlightOnHover","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad496964.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport {\n  LineChart,\n  BarChart,\n  Line,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  CartesianGrid,\n} from \"recharts\";\nimport \"./CommonChart.css\";\n\nconst CommonChart = (props) => {\n  const data = props.data === undefined ? [] : props.data;\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active) {\n      return (\n        <div\n          className=\"custom-tooltip\"\n          style={{\n            background: \"white\",\n            padding: 15,\n            borderRadius: 10,\n            border: \"1px solid grey\",\n          }}\n        >\n          <p\n            style={{\n              textAlign: \"center\",\n              fontWeight: \"bold\",\n              color: \"#404b69\",\n            }}\n          >\n            {label}\n          </p>\n          {typeof payload !== \"undefined\" &&\n            payload !== null &&\n            payload.map((item, index) => {\n              return (\n                <div key={index}>\n                  <span style={{ color: item.color, fontWeight: \"bold\" }}>\n                    {item.name}:{\" \"}\n                  </span>\n                  <span style={{ color: item.color, fontWeight: \"bold\" }}>\n                    {item.value}\n                  </span>\n                  <br />\n                </div>\n              );\n            })}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  let ChartName = (chart) => {\n    switch (chart) {\n      case \"LineChart\":\n        return LineChart;\n      case \"BarChart\":\n        return BarChart;\n      default:\n        return LineChart;\n    }\n  };\n\n  let selectChart = (chart) => {\n    switch (chart) {\n      case \"LineChart\":\n        return Line;\n      case \"BarChart\":\n        return Bar;\n      default:\n        return Line;\n    }\n  };\n\n  let Chart = selectChart(props.chart);\n  let Type = ChartName(props.chart);\n  return (\n    <div\n      className=\"container-CommonChart\"\n      style={props.height ? { height: props.height } : { height: 270 }}\n    >\n      {data.length > 0 ? (\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <Type width={500} height={100} data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n\n            <XAxis hide={false} dataKey={props.axis ? props.axis : \"name\"} />\n\n            <YAxis />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend\n              layout={props.legendLayout ? props.legendLayout : \"horizontal\"}\n              margin={{ top: 0, left: 0, right: 0, bottom: 10 }}\n              verticalAlign={\n                props.verticalAlign ? props.verticalAlign : \"bottom\"\n              }\n            />\n            {props.labels &&\n              props.labels.map((label, index) =>\n                props.chart === \"BarChart\" ? (\n                  <Chart\n                    key={index}\n                    stackId={\"a\"}\n                    type=\"monotone\"\n                    dataKey={label}\n                    stroke={props.colors[index]}\n                    fill={props.colors[index]}\n                  />\n                ) : (\n                  <Chart\n                    key={index}\n                    stackId={\"a\"}\n                    type=\"monotone\"\n                    dataKey={label}\n                    stroke={props.colors[index]}\n                    activeDot={{ r: 8 }}\n                    fill={props.colors[index]}\n                    dot={false}\n                  />\n                )\n              )}\n          </Type>\n        </ResponsiveContainer>\n      ) : (\n        <div className=\"no-data\">No data</div>\n      )}\n    </div>\n  );\n};\n\nexport default CommonChart;\n","import React from \"react\";\n\nconst Title = (props) => {\n  return (\n    <div style={{ marginBottom: 15 }}>\n      <label style={{ fontSize: 16, fontWeight: \"bold\", marginBottom: 5 }}>\n        {props.title}\n      </label>\n      <hr\n        style={{\n          marginTop: 0,\n          position: \"absolute\",\n          border: \"2px solid #4a5068\",\n          width: 50,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Title;\n","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <div\n      className=\"d-flex justify-content-center align-items-center\"\n      style={{ minHeight: 270 }}\n    >\n      <div className=\"spinner-grow\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useState, useEffect } from \"react\";\nimport CommonChart from \"../CommonChart/CommonChart\";\nimport Title from \"../Title/Title\";\nimport Loader from \"../Loader/Loader\";\nimport DataTable from \"react-data-table-component\";\n\nconst Dashboard = () => {\n  const [data, setData] = useState({});\n  const [loader, setLoader] = useState(false);\n\n  useEffect(() => {\n    setLoader(true);\n    fetch(\n      \"https://raw.githubusercontent.com/anadahalli/interview/master/db.json\"\n    )\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setData(result);\n          setLoader(false);\n        },\n        (_error) => {\n          setData({});\n          setLoader(false);\n        }\n      );\n  }, []);\n\n  const groupBy = (array, key) => {\n    return array.reduce((result, currentValue) => {\n      let date = new Date(currentValue[key]);\n      date = date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear();\n      (result[date] = result[date] || []).push(currentValue);\n      return result;\n    }, {});\n  };\n\n  let groupbyDate =\n    Object.keys(data).length > 0 ? groupBy(data.orders, \"created\") : {};\n  let chartData =\n    Object.keys(data).length > 0\n      ? Object.keys(groupbyDate).map((order) => {\n          let orders = groupbyDate[order].length;\n          let price = 0;\n          groupbyDate[order].map((item) => (price += +item.price));\n          return { name: order, Orders: orders, Price: price };\n        })\n      : [];\n\n  let columnList = [\n    \"id\",\n    \"firstName\",\n    \"lastName\",\n    \"email\",\n    \"created\",\n    \"orders\",\n  ];\n\n  let columns = columnList.map((column) => {\n    return {\n      name: column.charAt(0).toUpperCase() + column.slice(1),\n      selector: column,\n      sortable: true,\n    };\n  });\n\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <h3>Analytics Dashboard</h3>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-lg-6\">\n          <div className=\"card p-4\">\n            <Title title=\"Orders Count\" />\n            {loader ? (\n              <Loader />\n            ) : (\n              <CommonChart\n                grid={false}\n                chart={\"BarChart\"}\n                data={chartData}\n                labels={[\"Orders\"]}\n                colors={[\"#192a56\"]}\n              />\n            )}\n          </div>\n        </div>\n        <div className=\"col-sm-12 col-lg-6\">\n          <div className=\"card p-4\">\n            <Title title=\"Orders Count\" />\n            {loader ? (\n              <Loader />\n            ) : (\n              <CommonChart\n                grid={false}\n                chart={\"LineChart\"}\n                data={chartData}\n                labels={[\"Price\"]}\n                colors={[\"#192a56\"]}\n              />\n            )}\n          </div>\n        </div>\n        <div className=\"col-sm-12\" style={{ margin: \"30px 0px\" }}>\n          <div className=\"card p-4\">\n            <Title title=\"Customers\" />\n            {loader ? (\n              <Loader />\n            ) : (\n              <DataTable\n                data={data.customers}\n                pagination\n                highlightOnHover\n                columns={columns}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Dashboard from \"./components/Dashboard/Dashboard\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}